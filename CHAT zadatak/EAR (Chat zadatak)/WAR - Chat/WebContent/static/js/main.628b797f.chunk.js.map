{"version":3,"sources":["assets/ikonica.png","components/Register/Register.js","components/Users/User/User.js","components/Users/ChatBox/ChatBox.js","components/Users/Users.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Register","props","handleChange","event","setState","target","name","value","register","preventDefault","console","log","state","username","password","confPassword","NotificationManager","warning","axios","post","then","response","success","history","push","pathname","catch","toUsers","className","src","logo","alt","width","height","onSubmit","this","onChange","type","to","React","Component","withRouter","User","activeDiv","isLoggedIn","active","onClick","onClickk","ChatBox","content","sendMessage","userName","subject","BASE_URL","userId","senderId","loggedUserId","receiverId","getAllMessages","error","get","messages","data","_handleKeyDown","e","key","chatBoxUser","filteredMessages","filter","msg","closeBox","reverse","map","id","loggedUser","onKeyDown","Users","msgContent","sendToAll","loggedInUsers","length","location","closeAllBoxes","i","users","forceUpdate","boxes","getLoggedUsers","getRegisteredUsers","changeActiveState","boxId","box","showChatBox","some","newBox","logOut","delete","registeredUsers","undefined","loggedInUserId","loggedId","loggedUsername","filteredUsers","user","loggedIn","Login","login","loggedInUser","loggedStatus","status","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.628b797f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ikonica.b00bb764.png\";","import React from 'react';\r\nimport axios from 'axios';\r\nimport logo from '../../assets/ikonica.png';\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confPassword: '',\r\n            toUsers: false\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    register = event => {\r\n        event.preventDefault();\r\n        console.log(\"REGISTERED\");\r\n        if (this.state.username === '' || this.state.password === '' || this.state.confPassword === '') {\r\n            NotificationManager.warning(\"Fields cannot be empty!\", \"\", 3000);\r\n        } else if (this.state.password == this.state.confPassword){\r\n            axios.post(\"http://localhost:8080/WAR_-_Chat/rest/users/register\", {\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            }).then((response) => {\r\n                console.log(response);\r\n                NotificationManager.success(\"Please log in now.\",\"Successfully registered!\",3000);\r\n                this.props.history.push({\r\n                    pathname: '/' \r\n                })\r\n            }).catch(() => NotificationManager.warning(\"User with given username already exists.\",\"\",3000))\r\n        } else {\r\n            NotificationManager.warning(\"Passwords doesn't match.\",\"\",3000);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"126\" height=\"126\" />\r\n                <br />\r\n                <form onSubmit={this.register}>\r\n                    <table>\r\n                        <tr>\r\n                            <td className=\"first-col\"><label>Username: * </label></td>\r\n                            <td><input className=\"input-text\" name=\"username\" onChange={this.handleChange} value={this.state.username} type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"first-col\"><label>Password: * </label></td>\r\n                            <td><input className=\"input-text\" name=\"password\" onChange={this.handleChange} value={this.state.password} type=\"password\" /></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"first-col\"><label>Confirm Password: * </label></td>\r\n                            <td><input className=\"input-text\" name=\"confPassword\" onChange={this.handleChange} value={this.state.confPassword} type=\"password\" /></td>\r\n                        </tr>\r\n                    </table>\r\n                    <br />\r\n                    <button type=\"submit\" className=\"register-btn\">Register</button>\r\n                </form>\r\n                <br />\r\n                <small>Already have an account? <Link to=\"/\">Log In!</Link></small>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Register);","import React from 'react';\r\nimport '../Users.css';\r\n\r\nclass User extends React.Component {\r\n    render() {\r\n\r\n        let activeDiv;\r\n        if (this.props.isLoggedIn == \"LOGGED_IN\") {\r\n            if (this.props.active) {\r\n                activeDiv = <div className=\"activeCircle\"></div>\r\n            } else {\r\n                activeDiv = <div className=\"inactiveCircle\"></div>\r\n            }\r\n        } else {\r\n            if (this.props.active) {\r\n                activeDiv = <div className=\"redActiveCircle\"></div>\r\n            } else {\r\n                activeDiv = <div className=\"redInactiveCircle\"></div>\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"row user\">\r\n                <div className=\"col-9\">\r\n                    <button onClick={this.props.onClickk}>{this.props.name}  {activeDiv}</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport axios from 'axios';\r\nimport '../Users.css';\r\n\r\nclass ChatBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            BASE_URL: \"http://localhost:8080/WAR_-_Chat/rest\",\r\n            subject: 'From: ',\r\n            content: '',\r\n            messages: []\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ content: event.target.value });\r\n    }\r\n\r\n    sendMessage = event => {\r\n        event.preventDefault();\r\n        console.log(\"POSLATO: \" + this.props.userName);\r\n        console.log(this.state.subject)\r\n        console.log(this.state.content)\r\n\r\n        axios.post(this.state.BASE_URL + \"/messages/\" + this.props.userId, {\r\n            subject: this.state.subject,\r\n            content: this.state.content,\r\n            senderId: this.props.loggedUserId,\r\n            receiverId: this.props.userId\r\n        }).then((response) => {\r\n            console.log(response);\r\n            this.setState({ content: \"\" });\r\n            this.getAllMessages();\r\n        }).catch((error) => console.log(error)); //TODO: notification manager\r\n\r\n    }\r\n\r\n    getAllMessages = () => {\r\n        axios.get(this.state.BASE_URL + \"/messages/\" + this.props.loggedUserId)\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState(\r\n                    { messages: response.data }\r\n                )\r\n            })\r\n            .catch((error) => {\r\n\r\n            })\r\n    }\r\n\r\n    _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.sendMessage(e);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllMessages();\r\n    }\r\n\r\n    render() {\r\n\r\n        var chatBoxUser = this.props.userId;\r\n        var filteredMessages = this.state.messages.filter(function (msg) {\r\n            return msg.senderId == chatBoxUser || msg.receiverId == chatBoxUser;\r\n        });\r\n\r\n        return (\r\n            <div className=\"chatBox\">\r\n                <div className=\"row \">\r\n                    <div className=\"col-5 name-header\">\r\n                        <h4>{this.props.userName}</h4>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <button onClick={this.props.closeBox} className=\"close\">X</button>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"messages\">\r\n                    {filteredMessages.reverse().map((msg) => {\r\n                        return msg.receiverId == chatBoxUser ?\r\n                            (<div key={msg.id} className=\"row message-right\">\r\n                                <small>{this.props.loggedUser} | 00:00</small>\r\n                                <p>{msg.content}</p>\r\n                            </div>)\r\n                            :\r\n                            (<div key={msg.id} className=\"row message-left\">\r\n                                <small>{this.props.userName} | 00:00</small>\r\n                                <p>{msg.content}</p>\r\n                            </div>)\r\n                    })}\r\n                </div>\r\n                <hr />\r\n                <div className=\"row inputDiv\">\r\n                    <input type=\"text\" name=\"msgContent\" onKeyDown={this._handleKeyDown} value={this.state.content} onChange={this.handleChange} className=\"typeField\" />\r\n                    <button onClick={this.sendMessage} className=\"btnSend\">Send</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatBox;","import React from 'react';\r\nimport './Users.css';\r\nimport logo from '../../assets/ikonica.png';\r\nimport axios from 'axios';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport { NotificationManager } from 'react-notifications';\r\n//components\r\nimport User from './User/User';\r\nimport ChatBox from './ChatBox/ChatBox';\r\n\r\nclass Users extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            BASE_URL: \"http://localhost:8080/WAR_-_Chat/rest\",\r\n            boxes: [],\r\n            users: [\r\n                { id: 1, name: \"Prvi Prvic\", active: false },\r\n                { id: 2, name: \"Drugi Drugic\", active: false },\r\n                { id: 3, name: \"Treci Trecic\", active: false }\r\n            ],\r\n            loggedInUsers: [],\r\n            registeredUsers: [],\r\n            msgContent: ''\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ msgContent: event.target.value });\r\n    }\r\n\r\n    _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.sendToAll(e);\r\n        }\r\n    }\r\n\r\n    sendToAll = event => {\r\n        event.preventDefault();\r\n        console.log(\"SVI\");\r\n        console.log(this.state.msgContent);\r\n\r\n        if (this.state.loggedInUsers.length == 0) {\r\n            NotificationManager.warning(\"There is no logged in users.\", \"\", 3000);\r\n        } else {\r\n            axios.post(this.state.BASE_URL + \"/messages/all\", {\r\n                subject: \"Subject (All)\",\r\n                content: this.state.msgContent,\r\n                senderId: this.props.location.state.loggedUser.id,\r\n                receiverId: 1\r\n            }).then((response) => {\r\n                console.log(response);\r\n                this.setState({ msgContent: \"\" })\r\n                this.getAllMessages();\r\n                this.closeAllBoxes();\r\n                NotificationManager.success(\"Successfully sent!\", \"\", 3000);\r\n            }).catch(() => NotificationManager.error(\"Something went wrong. Please try again later.\", \"\", 3000));\r\n        }\r\n\r\n    }\r\n\r\n    closeAllBoxes = () => {\r\n        for (let i = 0; i < this.state.users.length; i++) {\r\n            // eslint-disable-next-line\r\n            this.state.users[i].active = false;\r\n            this.forceUpdate()\r\n            this.setState({ boxes: [] })\r\n        }\r\n    }\r\n\r\n    getAllMessages = () => {\r\n        axios.get(this.state.BASE_URL + \"/messages/\" + this.state.loggedUserId)\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState(\r\n                    { messages: response.data }\r\n                )\r\n            })\r\n            .catch((error) => {\r\n\r\n            })\r\n    }\r\n\r\n\r\n    getLoggedUsers = () => {\r\n        console.log(\"LOGGED USERS\");\r\n\r\n        axios.get(this.state.BASE_URL + \"/users/loggedIn\")\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState({ loggedInUsers: response.data });\r\n            })\r\n            .catch((error) => {\r\n\r\n            })\r\n    }\r\n\r\n    getRegisteredUsers = () => {\r\n        console.log(\"REGISTERED USERS\");\r\n\r\n        axios.get(this.state.BASE_URL + \"/users/registered\")\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState({ users: response.data });\r\n            })\r\n            .catch((error) => {\r\n\r\n            })\r\n    }\r\n\r\n    changeActiveState = (userId) => {\r\n        for (let i = 0; i < this.state.users.length; i++) {\r\n            // eslint-disable-next-line\r\n            if (this.state.users[i].id == userId) {\r\n                // eslint-disable-next-line\r\n                this.state.users[i].active = !this.state.users[i].active;\r\n                this.forceUpdate()\r\n            }\r\n        }\r\n    }\r\n\r\n    closeBox = (boxId) => {\r\n        this.setState({\r\n            // eslint-disable-next-line\r\n            boxes: this.state.boxes.filter(box => box.id != boxId)\r\n        });\r\n        this.changeActiveState(boxId);\r\n    }\r\n\r\n    showChatBox = (userName, userId) => {\r\n        if (this.state.boxes.some(box => box.id === userId)) {\r\n            this.closeBox(userId);\r\n        } else {\r\n            let newBox = {\r\n                id: userId,\r\n                username: userName,\r\n                messages: []\r\n            }\r\n\r\n            axios.get(this.state.BASE_URL + \"/messages/\" + userId)\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    newBox.messages = response.data;\r\n                    this.setState(\r\n                        { boxes: [...this.state.boxes, newBox] }\r\n                    )\r\n                    this.changeActiveState(userId);\r\n                })\r\n                .catch((error) => {\r\n\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    logOut = event => {\r\n        event.preventDefault();\r\n        axios.delete(this.state.BASE_URL + \"/users/\" + this.props.location.state.loggedUser.id)\r\n            .then((response) => {\r\n                console.log(response);\r\n\r\n            })\r\n            .catch((error) => {\r\n\r\n            })\r\n        this.props.history.push(\"/\"); //privremeno\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.location.state != undefined) {\r\n            this.getLoggedUsers();\r\n            this.getRegisteredUsers();\r\n            this.setState({ loggedInUserId: this.props.location.state.id })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.location.state != undefined) {\r\n            var loggedId = this.props.location.state.loggedUser.id;\r\n            var loggedUsername = this.props.location.state.loggedUser.username;\r\n            var filteredUsers = this.state.users.filter(function (user) {\r\n                return user.id !== loggedId;\r\n            });\r\n\r\n            console.log(loggedId);\r\n        }\r\n\r\n        return this.props.location.state != undefined ? (\r\n            <div className=\"Users\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-6 col-lg-4 .col-xl-4\">\r\n                        <div className=\"user-list\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-4 col-sm-4 col-md-12 .col-xl-5 col-lg-5\">\r\n                                    <div className=\"avatar\"></div>\r\n                                </div>\r\n                                <div className=\"col-8 col-sm-8 .col-xl-7 col-lg-7 col-md-12 welcome\">\r\n                                    <h3>Hi, {loggedUsername}</h3>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                            <hr />\r\n                            <br />\r\n                            <h4>Say hi to someone!</h4>\r\n                            <br />\r\n                            <div className=\"userss\">\r\n                                {filteredUsers.map((user) =>\r\n                                    <User isLoggedIn={user.loggedIn} onClickk={() => this.showChatBox(user.username, user.id)} name={user.username} active={user.active} key={user.id} id={user.id} />\r\n                                )}\r\n                            </div>\r\n                            <br />\r\n                            <hr />\r\n                            <label>Send message to all logged users:</label>\r\n                            <div>\r\n                                <input type=\"text\" className=\"typeField\" onKeyDown={this._handleKeyDown} value={this.state.msgContent} name=\"msgContent\" onChange={this.handleChange} />\r\n                                <button onClick={this.sendToAll} className=\"btnSendAll\">Send</button>\r\n                            </div>\r\n                            <hr />\r\n                            <button onClick={this.logOut} className=\"btnSendAll\">Log out</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6 col-lg-8 .col-xl-8\">\r\n                        <div className=\"home-page\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-9\">\r\n                                    <h1>Welcome!</h1>\r\n                                </div>\r\n                                <div className=\"col-3\">\r\n                                    <img alt=\"logo\" src={logo} height=\"70\" width=\"70\" />\r\n                                </div>\r\n                            </div>\r\n                            {this.state.boxes.reverse().map((box) =>\r\n                                <ChatBox loggedUser={loggedUsername} loggedUserId={loggedId} key={box.id} userName={box.username} userId={box.id} messages={box.messages} closeBox={() => this.closeBox(box.id)} />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : (<Redirect to=\"/\" />);\r\n    }\r\n}\r\n\r\nexport default withRouter(Users);","import React from 'react';\r\nimport axios from 'axios';\r\nimport logo from '../../assets/ikonica.png';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from 'react-router-dom';\r\n\r\nimport Users from '../Users/Users';\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            toUsers: false,\r\n            loggedInUser: {\r\n                username: '',\r\n                password: '',\r\n                id: 0\r\n            },\r\n            loggedStatus: false\r\n        }\r\n    }\r\n\r\n    login = event => {\r\n        event.preventDefault();\r\n        if (this.state.username === '' || this.state.password === '') {\r\n            NotificationManager.warning(\"Username and password cannot be empty!\", \"\", 3000);\r\n        } else {\r\n            console.log(\"LOGGED IN\");\r\n            axios.post(\"http://localhost:8080/WAR_-_Chat/rest/users/login\", {\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            }).then((response) => {\r\n                this.setState({ loggedInUser: response.data, loggedStatus: true});\r\n                NotificationManager.success(\"Welcome back!\", \"\", 3000);\r\n                this.props.history.push({\r\n                    pathname: '/users',\r\n                    state: {\r\n                        loggedUser: {\r\n                            username: response.data.username,\r\n                            id: response.data.id,\r\n                            status: this.state.loggedStatus\r\n                        }\r\n                    }\r\n                })\r\n            }).catch((error) => NotificationManager.error(\"There is no registered users with given username and password.\", \"\", 3000));\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"256\" height=\"256\" />\r\n                <br />\r\n                <p>\r\n                    Welcome to Chatout app!\r\n              </p>\r\n                <form onSubmit={this.login}>\r\n                    <table>\r\n                        <tr><td><label>Username: </label><td></td><input className=\"input-text\" onChange={this.handleChange} value={this.state.username} name=\"username\" type=\"text\" /></td></tr>\r\n                        <tr><td><label>Password: </label><td></td><input className=\"input-text\" onChange={this.handleChange} value={this.state.password} name=\"password\" type=\"password\" /></td></tr>\r\n                    </table>\r\n                    <br />\r\n                    <button type=\"submit\" className=\"register-btn\">Login</button>\r\n                </form>\r\n                <br />\r\n                <small>Doesn't have an account? <Link to=\"/register\">Register!</Link></small>\r\n            </header>);\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","//basic\nimport React from 'react';\nimport './App.css';\n//components\nimport Register from './components/Register/Register';\nimport Login from './components/Login/Login';\nimport Users from './components/Users/Users';\n//libs\nimport 'react-notifications/lib/notifications.css';\nimport { NotificationContainer } from 'react-notifications';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n        </Switch>\n\n        <NotificationContainer />\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}